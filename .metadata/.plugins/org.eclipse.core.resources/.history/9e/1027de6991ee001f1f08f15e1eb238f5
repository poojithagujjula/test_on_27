package JUnit;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class OrderService2Test {
	private OrderService2 orderService2;
	
	@BeforeEach //initialize orderservice2 before each test case
	public void setUp() {
		orderService2 = new OrderService2();
	}
	
	//Valid Price Cal Test
	@Test
	public void TestCalPrice_ValidInputs() {
		double price = 100.00;
		int quantity = 2;
		double expectedPrice = price*quantity*(1-orderService2.getDiscount());
		assertEquals(expectedPrice, orderService2.calPrice(price,  quantity)); //
	}
	
		@Test
		void TestSuccessfullyPlaced() {
			boolean result = orderService2.placeOrder(5);
			assertTrue(result, "Order should be placed successfully");
			assertEquals(5, orderService2.getStock(), "Stock should be reduced by the ordered quantity");
		}

		@Test
		public void TestCalPrice_invalidquant() {
			double price = 100;
			int quantity = 0;
				assertEquals(0,orderService2.calPrice(price,quantity));
		}
		@Test
			public void TestCalPrice_invalidInputs() {
				IllegalArgumentException exception=assertThrows(IllegalArgumentException.class, ()->{
					orderService2.calPrice(-100.00, 2);
				});
			}
	 
		@Test
		void TestSuccessfullyPlaced1() {
			boolean result = orderService2.placeOrder(5);
			assertTrue(result, "Order should be placed successfully");
			assertEquals(5, orderService2.getStock(), "Stock should be reduced by the ordered quantity");
		}
		//edge case -> quantity exactly same as stock
		 @Test
			 void TestPlaceOrderExactStock() {
			        boolean result = orderService2.placeOrder(10);
			        assertTrue(result, "Order should be placed successfully");
			        assertEquals(0, orderService2.getStock(), "Stock should be 0 after ordering the exact stock amount");
			    }

			//edge case -> order just below stock limit i.e. 10
		 @Test
			 void TestPlaceOrderBelowStockLimit() {
			        boolean result = orderService2.placeOrder(9);
			        assertTrue(result, "Order should be placed successfully");
			        assertEquals(1, orderService2.getStock(), "Stock should be reduced to 1 after ordering 9 out of 10");
			    }
		// Exceptional Cases
			// place order beyond stock
			// set stock -> -ve stock
			// set discount -> (0-1), 1.5 ->
			// negative price
			// negative quantity
		 @Test
		 void TestPlaceOrderbeyoundStock() {
			    int stock = 15;
			    IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.placeOrder(stock);
		        });
		    }
		 @Test
		 void TestNegativestock() {
			 int stock = -5;
			 IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.setStock(stock);
		        });
		 }
		 @Test
		 void Testinvaliddiscount() {
			 double discount = 1.5;
			 IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.setDiscount(discount);
		        });
		 }
		 @Test
		 void TestNegativeprice() {
			 int quantity = 4;
			 double price = -50;
			 IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.calPrice(price,quantity);
		        });
		 }
		 @Test
		 void TestNegativequantity() {
			 int quantity = -4;
			 double price = 50;
			 IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.calPrice(price,quantity);
		        });
		 }
		  
		//Exceptional cases
		  // Test case place order beyond stock
		    @Test
		    void TestPlaceOrderBeyondStock() {
		    	int stockOrder = 15;
		        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.placeOrder(stockOrder);
		        });
		        assertEquals("Insufficient stock", e.getMessage());
		    }
	 
		    // Test set stock to negative value
		    @Test
		    void TestSetNegativeStock() {
		    	int stockOrder = -5;
		        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.setStock(stockOrder);
		        });
		        assertEquals("Stock cannot be negative.", e.getMessage());
		    }
		    // Test set discount to an invalid value 
		    @Test
		    void TestSetInvalidDiscount() {
		    	double discount = 1.5;
		        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.setDiscount(discount);
		        });
		        assertEquals("Discount must be between 0 and 1.", e.getMessage());
		    }
	 
		    
		  //Test where price is negative
			void TestNegativePrice() {
				int quantity = 4;
				double price = -100.00;
		        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.calPrice(price, quantity);
		        });
		        assertEquals("Price cannot be negative.", e.getMessage());
		    }

			 //Test where negative is negative
			void TestNegativeQuantity() {
				int quantity = -4;
				double price = 100.00;
		        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.calPrice(price, quantity);
		        });
		        assertEquals("Quantity cannot be negative.", e.getMessage());
		    }

    //test case -> 0 quantity
	
	//successfully place order -> assertTrue,
	
	//positive cases
	
	//negative test cases
	
	

}
