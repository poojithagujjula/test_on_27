package com.onlinebookshop.shop;
 
import java.util.Date;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.onlinebookshop.shop.model.Author;
import com.onlinebookshop.shop.model.Book;
import com.onlinebookshop.shop.model.Order;
import com.onlinebookshop.shop.service.AuthorService;
import com.onlinebookshop.shop.service.BookService;
import com.onlinebookshop.shop.service.OrderService;
@SpringBootApplication
public class ShopApplication implements CommandLineRunner{
	//inject the service layer
	@Autowired
	private BookService bookService;
	@Autowired
    private AuthorService authorService;
	@Autowired
    private OrderService orderService;
	@Autowired
	private Book book1;
	@Autowired
	private Order order1;
	@Autowired
	private Order order2;
	@Autowired
	private Author author1;
	@Autowired
	private Author author2;

	@Autowired
	private Book book2;

	public static void main(String[] args) {
		SpringApplication.run(ShopApplication.class, args);
	}
	@Override
	public void run(String... args) throws Exception {
//		 TODO Auto-generated method stub
//		test the services
//		 Add authors
        //Author author1 = new Author(1, "Author One", "Country A");
        //Author author2 = new Author(2, "Author Two", "Country B");
        authorService.addAuthor(author1);
        authorService.addAuthor(author2);
        System.out.println("Authors added successfully");
        // Fetch all authors
        List<Author> authors = authorService.getAllAuthors();
        System.out.println("----Author list----");
        authors.forEach(author ->
            System.out.println("Author ID: " + author.getId() + ", Name: " + author.getName() + ", Country: " + author.getCountry())
        );
        // Get author by id
        int authorId = 1;
        Author foundAuthor = authorService.getAuthorById(authorId);
        System.out.println("Found Author: " + foundAuthor.getName());
        // Update author
        foundAuthor.setCountry("Updated Country");
        authorService.updateAuthor(foundAuthor);
        System.out.println("Updated Author ID: " + foundAuthor.getId() + ", Updated Country: " + foundAuthor.getCountry());
        // Delete author
        int authorIdToDelete = 2;
        authorService.deleteById(authorIdToDelete);
        System.out.println("Author with ID " + authorIdToDelete + " deleted");
        // Fetch updated author list
        authorService.getAllAuthors().forEach(author ->
            System.out.println("Author ID: " + author.getId() + ", Name: " + author.getName() + ", Country: " + author.getCountry())
        );

		//add books
		//Book book1=new Book(1,"New Book JDBC",300.00,1);
		//Book book2=new Book(1,"New Book JDBC 2",310.00,3);
		bookService.addBook(book1);
		bookService.addBook(book2);
		System.out.println("books added successfully");
		//fetch all books
		List<Book> books=bookService.getAllBooks();
		System.out.println("----book list----");
		books.forEach(book ->
		  System.out.println("Book ID :"+book.getId()+",Title :" +book.getTitle()+",Price:"+book.getPrice())
		 );
		//get book by id
		int bookId=1;
		Book foundBook = bookService.getBookById(bookId);
		//add a print
		//update
		foundBook.setPrice(450.00);
		bookService.updateBook(foundBook);
		//add a print ->book id - 1,updated price is this
		//delete
		int bookId2=3;
		bookService.deleteById(bookId2);
		//print ->book with this id deleted
		//fetch updated book list
		bookService.getAllBooks().forEach(book ->
		  System.out.println("Book ID :"+book.getId()+",Title :" +book.getTitle()+",Price:"+book.getPrice())
		 );
		 // Add orders
       // Order order1 = new Order(1, 1, 2);
       // Order order2 = new Order(2, 5, 3);
        orderService.addOrder(order1);
        orderService.addOrder(order2);
        System.out.println("Orders added successfully");
        // Fetch all orders
        List<Order> orders = orderService.getAllOrders();
        System.out.println("----Order list----");
        orders.forEach(order ->
            System.out.println("Order ID: " + order.getId() + ", Book ID: " + order.getBookId() + ", Quantity: " + order.getQuantity() + ", Order Date: " + order.getOrderDate())
        );
        // Get order by id
        int orderId = 1;
        Order foundOrder = orderService.getOrderById(orderId);
        System.out.println("Found Order: Book ID - " + foundOrder.getBookId());
        // Update order
        foundOrder.setQuantity(5);
        orderService.updateOrder(foundOrder);
        System.out.println("Updated Order ID: " + foundOrder.getId() + ", Updated Quantity: " + foundOrder.getQuantity());
        // Delete order
//        int orderIdToDelete = 2;
//        orderService.deleteById(orderIdToDelete);
//        System.out.println("Order with ID " + orderIdToDelete + " deleted");
        // Fetch updated order list
        orderService.getAllOrders().forEach(order ->
            System.out.println("Order ID: " + order.getId() + ", Book ID: " + order.getBookId() + ", Quantity: " + order.getQuantity() + ", Order Date: " + order.getOrderDate())
        );
 
	}
}