package JUnit;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class OrderService2Test {
	private OrderService2 orderService2;
	
	@BeforeEach //initialize orderservice2 before each test case
	public void setUp() {
		orderService2 = new OrderService2();
	}
	
	//Valid Price Cal Test
	@Test
	public void TestCalPrice_ValidInputs() {
		double price = 100.00;
		int quantity = 2;
		double expectedPrice = price*quantity*(1-orderService2.getDiscount());
		assertEquals(expectedPrice, orderService2.calPrice(price,  quantity)); //
	}
	
		@Test
		void TestSuccessfullyPlaced() {
			boolean result = orderService2.placeOrder(5);
			assertTrue(result, "Order should be placed successfully");
			assertEquals(5, orderService2.getStock(), "Stock should be reduced by the ordered quantity");
		}

		//Test where price is negative
		void TestNegativePrice() {
	        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
	            orderService2.calPrice(-100.00, 2);
	        });
	        assertEquals("Price cannot be negative.", e.getMessage());
	    }

		 @Test
		    void TestPlaceOrderExactStock() {
		        boolean result = orderService2.placeOrder(10);
		        assertTrue(result, "Order should be placed successfully");
		        assertEquals(0, orderService2.getStock(), "Stock should be 0 after ordering the exact stock amount");
		    }
	 
	 
		  @Test
		    void TestPlaceOrderBelowStockLimit() {
		        boolean result = orderService2.placeOrder(9);
		        assertTrue(result, "Order should be placed successfully");
		        assertEquals(1, orderService2.getStock(), "Stock should be reduced to 1 after ordering 9 out of 10");
		    }

		  //Exceptional cases
		    @Test
		    void TestPlaceOrderBeyondStock() {
		    	int stockOrder = 15;
		        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.placeOrder(stockOrder);
		        });
		        assertEquals("Insufficient stock", e.getMessage());
		    }
	        
		    @Test
		    void TestSetNegativeStock() {
		    	int stockOrder = -5;
		        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.setStock(stockOrder);
		        });
		        assertEquals("Stock cannot be negative.", e.getMessage());
		    }
		    
			void TestNegativeQuantity() {
				int quantity = -4;
				double price = 100.00;
		        IllegalArgumentException e = assertThrows(IllegalArgumentException.class, () -> {
		            orderService2.calPrice(price, quantity);
		        });
		        assertEquals("Quantity cannot be negative.", e.getMessage());
		    }

		  
    //test case -> 0 quantity
	
	//successfully place order -> assertTrue,
	
	//positive cases
	
	//negative test cases
	
	

}
